USE DATABASE RONALDO;

CREATE OR REPLACE SCHEMA RONALDO.B_CLEANING;

USE SCHEMA RONALDO.B_CLEANING;


// CHECK IF ID IS A VALID IDENTIFIER
CREATE OR REPLACE TABLE T_TEST_IDENTIFIER AS 
SELECT COUNT(ID) AS CNT_ID,
    COUNT(DISTINCT ID) AS CNT_DISTINCT_ID,
    CASE WHEN CNT_ID = CNT_DISTINCT_ID THEN 'OK' ELSE 'KO' END AS TEST_CNT,
    CASE WHEN SUM(CASE WHEN ID IS NULL THEN 1 ELSE 0 END) = 0 THEN 'OK' ELSE 'KO' END AS TEST_NULL_ID
FROM RONALDO.A_IMPORT.TT_CR7_IMPORT;


/****************/
/* START OF ETL */
/****************/

CREATE OR REPLACE TABLE TMP_STATISTICS AS
    SELECT MODE(POWER_OF_SHOT) AS POWER_OF_SHOT_MODE,
        MODE(DISTANCE_OF_SHOT) AS DISTANCE_OF_SHOT_MODE
    FROM RONALDO.A_IMPORT.TT_CR7_IMPORT;

-- SELECT COUNT(*) FROM TMP_MATCH_AGGREGATES
CREATE OR REPLACE TABLE TMP_MATCH_AGGREGATES AS
    SELECT MATCH_ID,
        MAX(GAME_SEASON) AS MAX_GAME_SEASON,
        MAX(DATE_OF_GAME) AS MAX_DATE_OF_GAME,
        MAX(KNOCKOUT_MATCH) AS MAX_KNOCKOUT_MATCH,
        MAX(HOME_AWAY) AS MAX_HOME_AWAY
    FROM RONALDO.A_IMPORT.TT_CR7_IMPORT
    GROUP BY MATCH_ID
;


CREATE OR REPLACE TABLE T_CR7_CLEANING_T00 AS 
SELECT A.ID,
    A.MATCH_EVENT_ID,
    CASE WHEN A.LOCATION_X IS NULL THEN 0 ELSE A.LOCATION_X END AS LOCATION_X,
    CASE WHEN A.LOCATION_Y IS NULL THEN 0 ELSE A.LOCATION_Y END AS LOCATION_Y,
    LAG(A.REMAINING_MIN) OVER(PARTITION BY A.MATCH_ID ORDER BY A.ID) AS REMAINING_MIN_PREV,
    LEAD(A.REMAINING_MIN) OVER(PARTITION BY A.MATCH_ID ORDER BY A.ID) AS REMAINING_MIN_SUCC,
    CASE WHEN A.REMAINING_MIN IS NULL THEN
        TO_NUMBER(((CASE WHEN REMAINING_MIN_PREV IS NULL AND REMAINING_MIN_SUCC IS NULL THEN 0
        WHEN REMAINING_MIN_PREV IS NULL THEN REMAINING_MIN_SUCC
        ELSE REMAINING_MIN_PREV END)
        +
        (CASE WHEN REMAINING_MIN_SUCC IS NULL AND REMAINING_MIN_PREV IS NULL THEN 0
        WHEN REMAINING_MIN_SUCC IS NULL THEN REMAINING_MIN_PREV
        ELSE REMAINING_MIN_SUCC END)) /2) 
    ELSE A.REMAINING_MIN END AS REMAINING_MIN,
    A.REMAINING_MIN AS REMAINING_MIN_OLD,
    CASE WHEN A.POWER_OF_SHOT IS NULL THEN STA.POWER_OF_SHOT_MODE ELSE A.POWER_OF_SHOT END AS POWER_OF_SHOT,
    CASE WHEN A.MATCH_ID IN (29600813, 29600072) THEN '1996-97'
         WHEN A.GAME_SEASON IS NULL THEN AGGR.MAX_GAME_SEASON ELSE A.GAME_SEASON 
     END AS GAME_SEASON,    
    LAG(A.REMAINING_SEC) OVER(PARTITION BY A.MATCH_ID, REMAINING_MIN ORDER BY A.ID) AS REMAINING_SEC_PREV,
    LEAD(A.REMAINING_SEC) OVER(PARTITION BY A.MATCH_ID, REMAINING_MIN ORDER BY A.ID) AS REMAINING_SEC_SUCC,
    CASE WHEN A.REMAINING_SEC IS NULL THEN
        TO_NUMBER(((CASE WHEN REMAINING_SEC_PREV IS NULL AND REMAINING_SEC_SUCC IS NULL THEN 0
        WHEN REMAINING_SEC_PREV IS NULL THEN REMAINING_SEC_SUCC
        ELSE REMAINING_SEC_PREV END)
        +
        (CASE WHEN REMAINING_SEC_SUCC IS NULL AND REMAINING_SEC_PREV IS NULL THEN 0
        WHEN REMAINING_SEC_SUCC IS NULL THEN REMAINING_SEC_PREV
        ELSE REMAINING_SEC_SUCC END)) /2) 
    ELSE A.REMAINING_SEC END AS REMAINING_SEC,
    A.REMAINING_SEC AS REMAINING_SEC_OLD,
    A.AREA_OF_SHOT,
    A.SHOT_BASICS,
    CASE WHEN A.RANGE_OF_SHOT IS NULL THEN 
        CASE WHEN A.DISTANCE_OF_SHOT < 28 THEN 'Less Than 8 ft.' 
             WHEN A.DISTANCE_OF_SHOT BETWEEN 28 AND 36 THEN '8-16 ft.' 
             WHEN A.DISTANCE_OF_SHOT BETWEEN 36 AND 42 THEN '16-24 ft.' 
             WHEN A.DISTANCE_OF_SHOT BETWEEN 42 AND 66 THEN '24+ ft.'
             WHEN A.DISTANCE_OF_SHOT > 66 THEN 'Back Court Shot'
         END
    ELSE A.RANGE_OF_SHOT END AS RANGE_OF_SHOT,
    CASE WHEN COALESCE(A.DISTANCE_OF_SHOT, A.DISTANCE_OF_SHOT_1) < 7.9999 THEN 'Less Than 8 ft.'
         WHEN COALESCE(A.DISTANCE_OF_SHOT, A.DISTANCE_OF_SHOT_1) BETWEEN 8 AND 15.9999 THEN '8-16 ft.'
         WHEN COALESCE(A.DISTANCE_OF_SHOT, A.DISTANCE_OF_SHOT_1) BETWEEN 16 AND 23.9999 THEN '16-24 ft.'
         WHEN COALESCE(A.DISTANCE_OF_SHOT, A.DISTANCE_OF_SHOT_1) BETWEEN 24 AND 47.9999 THEN '24+ ft.'
         WHEN COALESCE(A.DISTANCE_OF_SHOT, A.DISTANCE_OF_SHOT_1) > 48 THEN 'Back Court Shot' END AS RANGE_OF_SHOT_IN_FEETS,
    CASE WHEN A.TEAM_NAME IS NULL THEN
        CASE WHEN A.TEAM_ID = 1610612747 THEN 'Manchester United' 
             WHEN A.DATE_OF_GAME < TO_DATE('1995.07.01', 'YYYY.MM.DD') THEN 'Andorinha Yth.'
             WHEN A.DATE_OF_GAME BETWEEN TO_DATE('1995.07.01', 'YYYY.MM.DD') AND TO_DATE('1996.07.01', 'YYYY.MM.DD') THEN 'Nacional Yth.'
             WHEN A.DATE_OF_GAME BETWEEN TO_DATE('1996.07.01', 'YYYY.MM.DD') AND TO_DATE('1997.07.01', 'YYYY.MM.DD') THEN 'Nactional U15'
             WHEN A.DATE_OF_GAME BETWEEN TO_DATE('1997.07.01', 'YYYY.MM.DD') AND TO_DATE('1998.07.01', 'YYYY.MM.DD') THEN 'Sporting Sub-15'
             WHEN A.DATE_OF_GAME BETWEEN TO_DATE('1998.07.01', 'YYYY.MM.DD') AND TO_DATE('2000.07.01', 'YYYY.MM.DD') THEN 'Sporting U17'
             WHEN A.DATE_OF_GAME BETWEEN TO_DATE('2000.07.01', 'YYYY.MM.DD') AND TO_DATE('2002.07.01', 'YYYY.MM.DD') THEN 'Sporting U19'
             WHEN A.DATE_OF_GAME BETWEEN TO_DATE('2002.07.01', 'YYYY.MM.DD') AND TO_DATE('2003.08.12', 'YYYY.MM.DD') THEN 'Sporting CP'
             WHEN A.DATE_OF_GAME BETWEEN TO_DATE('2003.08.12', 'YYYY.MM.DD') AND TO_DATE('2009.07.06', 'YYYY.MM.DD') THEN 'Manchester United'
             WHEN A.DATE_OF_GAME BETWEEN TO_DATE('2009.07.06', 'YYYY.MM.DD') AND TO_DATE('2018.07.10', 'YYYY.MM.DD') THEN 'Real Madrid'
             WHEN A.DATE_OF_GAME BETWEEN TO_DATE('2018.07.10', 'YYYY.MM.DD') AND TO_DATE('2021.08.31', 'YYYY.MM.DD') THEN 'Juventus'
             WHEN A.DATE_OF_GAME > TO_DATE('2021.08.31', 'YYYY.MM.DD') THEN 'Manchester United'
         END
    ELSE A.TEAM_NAME END AS TEAM_NAME,
    CASE WHEN A.MATCH_ID = '29600031' THEN TO_DATE('1996.11.05', 'YYYY.MM.DD')
         WHEN A.DATE_OF_GAME IS NULL THEN AGGR.MAX_DATE_OF_GAME 
         ELSE A.DATE_OF_GAME END 
     AS DATE_OF_GAME,
     SHOT_ID_NUMBER,
     CAST(SUBSTRING(LAT_LNG, 0, CHARINDEX(',', LAT_LNG)-1) AS DECIMAL(10,6)) AS LATITUDE,
     CAST(SUBSTRING(LAT_LNG, CHARINDEX(',', LAT_LNG)+ 1, LEN(LAT_LNG)) AS DECIMAL(10,6)) AS LONGITUDE,
     COALESCE(TYPE_OF_SHOT, TYPE_OF_COMBINED_SHOT) AS TYPE_OF_SHOT,
     CAST(TRIM(SUBSTRING(COALESCE(TYPE_OF_SHOT, TYPE_OF_COMBINED_SHOT), CHARINDEX('-', COALESCE(TYPE_OF_SHOT, TYPE_OF_COMBINED_SHOT))+1,                  LEN(COALESCE(TYPE_OF_SHOT, TYPE_OF_COMBINED_SHOT)))) AS NUMBER) AS TYPE_OF_SHOT_NUM,
     CASE WHEN TYPE_OF_SHOT IS NOT NULL THEN 0 ELSE 1 END AS IS_COMBINED,
     A.MATCH_ID,
     A.TEAM_ID,
    CASE WHEN A.KNOCKOUT_MATCH IS NULL THEN AGGR.MAX_KNOCKOUT_MATCH 
         ELSE A.KNOCKOUT_MATCH END 
     AS KNOCKOUT_MATCH,
     CASE WHEN A.DISTANCE_OF_SHOT IS NULL THEN STA.DISTANCE_OF_SHOT_MODE ELSE A.DISTANCE_OF_SHOT END AS DISTANCE_OF_SHOT,
     CASE WHEN A.HOME_AWAY IS NULL THEN AGGR.MAX_HOME_AWAY 
         ELSE A.HOME_AWAY END 
     AS HOME_AWAY_TMP,
     CASE WHEN HOME_AWAY_TMP LIKE '%@%' THEN TRIM(SUBSTRING(HOME_AWAY_TMP, 0, CHARINDEX('@', HOME_AWAY_TMP)-1)) 
          WHEN HOME_AWAY_TMP LIKE '%vs.%' THEN TRIM(SUBSTRING(HOME_AWAY_TMP, 0, CHARINDEX('vs.', HOME_AWAY_TMP)-1))
     END AS TEAM_HOME,
     CASE WHEN HOME_AWAY_TMP LIKE '%@%' THEN TRIM(SUBSTRING(HOME_AWAY_TMP, CHARINDEX('@', HOME_AWAY_TMP)+ 1, LEN(HOME_AWAY_TMP))) 
          WHEN HOME_AWAY_TMP LIKE '%vs.%' THEN TRIM(SUBSTRING(HOME_AWAY_TMP, CHARINDEX('vs.', HOME_AWAY_TMP)+ 3, LEN(HOME_AWAY_TMP)))
     END AS TEAM_AWAY,
     A.IS_GOAL      
FROM RONALDO.A_IMPORT.TT_CR7_IMPORT A
    LEFT JOIN TMP_MATCH_AGGREGATES AGGR
    ON A.MATCH_ID = AGGR.MATCH_ID
        LEFT JOIN TMP_STATISTICS STA
        ON 1=1
; 


CREATE OR REPLACE TABLE T_CR7_CLEANING AS 
SELECT DISTINCT A.ID,
    A.MATCH_EVENT_ID,
    A.LOCATION_X,
    A.LOCATION_Y,
    A.REMAINING_MIN,
    A.POWER_OF_SHOT,
    A.GAME_SEASON,
    A.REMAINING_SEC,
    A.AREA_OF_SHOT,
    A.SHOT_BASICS,
    A.RANGE_OF_SHOT,
    CASE WHEN A.RANGE_OF_SHOT_IN_FEETS IS NULL THEN A.RANGE_OF_SHOT ELSE A.RANGE_OF_SHOT_IN_FEETS END AS RANGE_OF_SHOT_IN_FEETS,
    A.TEAM_NAME,
    A.DATE_OF_GAME,
    A.SHOT_ID_NUMBER,
    CASE WHEN A.LATITUDE IS NULL THEN 0 ELSE A.LATITUDE END AS LATITUDE,
    CASE WHEN A.LONGITUDE IS NULL THEN 0 ELSE A.LONGITUDE END AS LONGITUDE,
    A.TYPE_OF_SHOT,
    A.TYPE_OF_SHOT_NUM,
    A.IS_COMBINED,
    A.MATCH_ID,
    A.TEAM_ID,
    A.KNOCKOUT_MATCH,
    A.DISTANCE_OF_SHOT,
    A.TEAM_HOME,
    A.TEAM_AWAY,
    CASE WHEN A.IS_GOAL IS NULL THEN B.IS_GOAL ELSE A.IS_GOAL END AS IS_GOAL
FROM T_CR7_CLEANING_T00 A
LEFT JOIN RONALDO.A_IMPORT.M_FINAL_PREDICTIONS B
ON A.TYPE_OF_SHOT_NUM = B.TYPE_OF_SHOT AND A.DISTANCE_OF_SHOT = B.DISTANCE_OF_SHOT AND A.POWER_OF_SHOT = B.POWER_OF_SHOT
;

DROP TABLE T_CR7_CLEANING_T00;
DROP TABLE TMP_MATCH_AGGREGATES;
DROP TABLE TMP_STATISTICS;



/* Creation of training and unlabeled set */
-- SELECT * FROM T_TRAINING_SET
CREATE OR REPLACE TABLE T_TRAINING_SET AS
SELECT 
    TYPE_OF_SHOT_NUM AS TYPE_OF_SHOT,
    CAST(DISTANCE_OF_SHOT AS NUMBER) AS DISTANCE_OF_SHOT, 
    CAST(POWER_OF_SHOT AS NUMBER) AS POWER_OF_SHOT,
    CAST(IS_GOAL AS NUMBER) AS IS_GOAL
FROM RONALDO.B_CLEANING.T_CR7_CLEANING
WHERE IS_GOAL IS NOT NULL;


-- SELECT count(*) FROM T_UNLABELED_SET
CREATE OR REPLACE TABLE T_UNLABELED_SET AS
SELECT 
    TYPE_OF_SHOT_NUM AS TYPE_OF_SHOT,
    CAST(DISTANCE_OF_SHOT AS NUMBER) AS DISTANCE_OF_SHOT, 
    CAST(POWER_OF_SHOT AS NUMBER) AS POWER_OF_SHOT
FROM RONALDO.B_CLEANING.T_CR7_CLEANING
WHERE IS_GOAL IS NULL;



